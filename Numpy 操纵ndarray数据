#访问秩为1的ndarray中的元素
x[i]
#更改秩为1的ndarray中的元素
x[i]=n
#访问和修改秩为 2 的 ndarray 中的特定元素
x[i,j]
x[i,j]=n
_________________________________________________
#删除ndarray 中的元素:np.delete(ndarray, elements, axis)
# We create a rank 1 ndarray 
x = np.array([1, 2, 3, 4, 5])
# We delete the first and last element of x
x = np.delete(x, [0,4])

# We create a rank 2 ndarray
Y = np.array([[1,2,3],[4,5,6],[7,8,9]])
# We delete the first row of y
w = np.delete(Y, 0, axis=0)
# We delete the first and last column of y
v = np.delete(Y, [0,2], axis=1)
____________________________________________________
#向 ndarray 中添加元素:np.append(ndarray, elements, axis)
# We create a rank 1 ndarray 
x = np.array([1, 2, 3, 4, 5])
# We append the integer 6 to x
x = np.append(x, 6)
# We append the integer 7 and 8 to x
x = np.append(x, [7,8])

# We create a rank 2 ndarray 
Y = np.array([[1,2,3],[4,5,6]])
# We append a new row containing 7,8,9 to y
v = np.append(Y, [[7,8,9]], axis=0)
# We append a new column containing 9 and 10 to y
q = np.append(Y,[[9],[10]], axis=1)
_____________________________________________________
#向 ndarray 中插入值:np.insert(ndarray, index, elements, axis),
#此函数会将给定的元素列表沿着指定的轴插入到 ndarray 中，并放在给定的索引前面!前面!前面!
# We create a rank 1 ndarray 
x = np.array([1, 2, 5, 6, 7])
# We insert the integer 3 and 4 between 2 and 5 in x. 
x = np.insert(x,2,[3,4])

# We create a rank 2 ndarray 
Y = np.array([[1,2,3],[7,8,9]])
# We insert a row between the first and last row of y
w = np.insert(Y,1,[4,5,6],axis=0)
# We insert a column full of 5s between the first and second column of y
v = np.insert(Y,1,5, axis=1)
_____________________________________________________
#使用 np.vstack() 函数进行垂直堆叠或使用 np.hstack() 函数进行水平堆叠:
# We create a rank 1 ndarray 
x = np.array([1,2])

# We create a rank 2 ndarray 
Y = np.array([[3,4],[5,6]])

# We print x
print()
print('x = ', x)

# We print Y
print()
print('Y = \n', Y)

# We stack x on top of Y
z = np.vstack((x,Y))

# We stack x on the right of Y. We need to reshape x in order to stack it on the right of Y. 
w = np.hstack((Y,x.reshape(2,1)))

# We print z
print()
print('z = \n', z)

# We print w
print()
print('w = \n', w

#输出：
x = [1 2]

Y =
[[3 4]
 [5 6]]

z =
[[1 2]
 [3 4]
 [5 6]]

w =
[[3 4 1]
 [5 6 2]]
————————————————————————————————————————————————————————————————————————
#切片方式是在方括号里用冒号 : 分隔起始和结束索引
# We create a 4 x 5 ndarray that contains integers from 0 to 19
X = np.arange(20).reshape(4, 5)
# We select all the elements in the 3rd column
q = X[:,2]
# We select all the elements in the 3rd column but return a rank 2 ndarray？？
R = X[:,2:3]
————————————————————————————————————————————————————————————————————————
Z = X[1:4,2:5]
原始数组 X 的切片没有复制到变量 Z 中。X 和 Z 现在只是同一个 ndarray 的两个不同名称。
切片只是创建了原始数组的一个视图。如果对 Z 做出更改，也会更改 X 中的元素。
想创建一个新的 ndarray，其中包含切片中的值的副本，需要使用 np.copy() 函数。
np.copy(ndarray) 函数会创建给定 ndarray 的一个副本
# We create a 4 x 5 ndarray that contains integers from 0 to 19
X = np.arange(20).reshape(4, 5)

# We print X
print()
print('X = \n', X)
print()

# create a copy of the slice using the np.copy() function
Z = np.copy(X[1:4,2:5])

#  create a copy of the slice using the copy as a method
W = X[1:4,2:5].copy()
————————————————————————————————————————————————————————————————————————
使用一个 ndarray 对另一个 ndarray 进行切片、选择或更改另一个 ndarray 的元素
# We create a 4 x 5 ndarray that contains integers from 0 to 19
X = np.arange(20).reshape(4, 5)
# We create a rank 1 ndarray that will serve as indices to select elements from X
indices = np.array([1,3])
# We use the indices ndarray to select the 2nd and 4th row of X
Y = X[indices,:]
# We use the indices ndarray to select the 2nd and 4th column of X
Z = X[:, indices]
——————————————————————————————————————————————————————————————————————
np.diag(ndarray, k=N) 函数会以 N 定义的对角线提取元素。
默认情况下，k=0，表示主对角线。k > 0 的值用于选择在主对角线之上的对角线中的元素，k < 0 的值用于选择在主对角线之下的对角线中的元素。
# We create a 4 x 5 ndarray that contains integers from 0 to 19
X = np.arange(25).reshape(5, 5)
X =
[[ 0 1 2 3 4]
 [ 5 6 7 8 9]
 [10 11 12 13 14]
 [15 16 17 18 19]
 [20 21 22 23 24]]
# We print the elements in the main diagonal of X
print('z =', np.diag(X))
z = [ 0 6 12 18 24]
# We print the elements above the main diagonal of X
print('y =', np.diag(X, k=1))
y = [ 1 7 13 19]
# We print the elements below the main diagonal of X
print('w = ', np.diag(X, k=-1))
w = [ 5 11 17 23]
————————————————————————————————————————————————————————————————————————
使用 np.unique() 函数查找 ndarray 中的唯一元素
# Create 3 x 3 ndarray with repeated values
X = np.array([[1,2,3],[5,2,8],[1,2,3]])
X =
[[1 2 3]
 [5 2 8]
 [1 2 3]]
# We print the unique elements of X 
print('The unique elements in X are:',np.unique(X))
The unique elements in X are: [1 2 3 5 8]
